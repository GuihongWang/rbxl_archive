name: Archive Roblox Deployments

on:
  schedule:
    - cron: '0 0 * * *' # 每天运行一次
  workflow_dispatch:

jobs:
  archive-deployments:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        binary-type:
          - name: WindowsPlayer
            deploy-url: https://setup.rbxcdn.com/DeployHistory.txt
            blob-dir: /
            type-filter: WindowsPlayer
            packages: |
              RobloxApp.zip
              redist.zip
              shaders.zip
              ssl.zip
              WebView2.zip
              WebView2RuntimeInstaller.zip
              content-avatar.zip
              content-configs.zip
              content-fonts.zip
              content-sky.zip
              content-sounds.zip
              content-textures2.zip
              content-models.zip
              content-platform-fonts.zip
              content-platform-dictionaries.zip
              content-terrain.zip
              content-textures3.zip
              extracontent-luapackages.zip
              extracontent-translations.zip
              extracontent-models.zip
              extracontent-textures.zip
              extracontent-places.zip
          - name: WindowsStudio64
            deploy-url: https://setup.rbxcdn.com/DeployHistory.txt
            blob-dir: /
            type-filter: Studio64
            packages: |
              RobloxStudio.zip
              RibbonConfig.zip
              redist.zip
              Libraries.zip
              LibrariesQt5.zip
              WebView2.zip
              WebView2RuntimeInstaller.zip
              shaders.zip
              ssl.zip
              Qml.zip
              Plugins.zip
              StudioFonts.zip
              BuiltInPlugins.zip
              ApplicationConfig.zip
              BuiltInStandalonePlugins.zip
              content-qt_translations.zip
              content-sky.zip
              content-fonts.zip
              content-avatar.zip
              content-models.zip
              content-sounds.zip
              content-configs.zip
              content-api-docs.zip
              content-textures2.zip
              content-studio_svg_textures.zip
              content-platform-fonts.zip
              content-platform-dictionaries.zip
              content-terrain.zip
              content-textures3.zip
              extracontent-translations.zip
              extracontent-luapackages.zip
              extracontent-textures.zip
              extracontent-scripts.zip
              extracontent-models.zip
              studiocontent-models.zip
              studiocontent-textures.zip
          - name: MacPlayer
            deploy-url: https://setup.rbxcdn.com/mac/DeployHistory.txt
            blob-dir: /mac/
            type-filter: Client
            packages: RobloxPlayer.zip
          - name: MacStudio
            deploy-url: https://setup.rbxcdn.com/mac/DeployHistory.txt
            blob-dir: /mac/
            type-filter: Studio
            packages: RobloxStudioApp.zip
      fail-fast: false # 禁用 fail-fast

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install waybackpy
        run: |
          pip install waybackpy -U
      - name: Download and check DeployHistory
        id: check-deploy
        run: |
          binary_type=${{ matrix.binary-type.name }}
          deploy_url=${{ matrix.binary-type.deploy-url }}
          type_filter=${{ matrix.binary-type.type-filter }}
          # 尝试主 URL
          http_status=$(curl -s -w "%{http_code}" -o DeployHistory_${binary_type}.txt "$deploy_url")
          echo "HTTP status for $deploy_url: $http_status" | tee -a deploy_log_${binary_type}.txt
          if [ "$http_status" != "200" ]; then
            # 尝试备用路径
            deploy_url="https://setup.rbxcdn.com/channel/common${{ matrix.binary-type.blob-dir }}DeployHistory.txt"
            http_status=$(curl -s -w "%{http_code}" -o DeployHistory_${binary_type}.txt "$deploy_url")
            echo "HTTP status for fallback $deploy_url: $http_status" | tee -a deploy_log_${binary_type}.txt
            if [ "$http_status" != "200" ]; then
              echo "Error: Failed to download DeployHistory for $binary_type (HTTP status: $http_status)" | tee -a deploy_log_${binary_type}.txt
              exit 1
            fi
          fi
          if [ ! -s DeployHistory_${binary_type}.txt ]; then
            echo "Error: DeployHistory for $binary_type is empty" | tee -a deploy_log_${binary_type}.txt
            exit 1
          fi
          # 记录 DeployHistory.txt 最后十行以便调试
          echo "Last 10 lines of DeployHistory_${binary_type}.txt:" | tee -a deploy_log_${binary_type}.txt
          tail -n 10 DeployHistory_${binary_type}.txt >> deploy_log_${binary_type}.txt
          hash=$(md5sum DeployHistory_${binary_type}.txt | awk '{print $1}')
          echo "$binary_type Hash: $hash" | tee -a deploy_log_${binary_type}.txt
          if [ -f "last_${binary_type}_hash.txt" ]; then
            last_hash=$(cat last_${binary_type}_hash.txt)
            if [ "$hash" != "$last_hash" ]; then
              echo "$binary_type DeployHistory updated!" | tee -a deploy_log_${binary_type}.txt
              echo "updated=true" >> $GITHUB_OUTPUT
            else
              echo "$binary_type DeployHistory unchanged" | tee -a deploy_log_${binary_type}.txt
              echo "updated=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "$binary_type DeployHistory first run" | tee -a deploy_log_${binary_type}.txt
            echo "updated=true" | tee -a deploy_log_${binary_type}.txt
          fi
          echo "$hash" > last_${binary_type}_hash.txt
          if [ -n "$type_filter" ]; then
            version=$(grep "New $type_filter" DeployHistory_${binary_type}.txt | grep -o 'version-[0-9a-f]\{16\}' | tail -n 1)
          else
            version=$(grep -o 'version-[0-9a-f]\{16\}' DeployHistory_${binary_type}.txt | tail -n 1)
          fi
          if [ -z "$version" ]; then
            echo "Error: No valid version-hash found in DeployHistory for $binary_type" | tee -a deploy_log_${binary_type}.txt
            exit 1
          fi
          echo "$binary_type Latest Version: $version" | tee -a deploy_log_${binary_type}.txt
          echo "version=$version" >> $GITHUB_OUTPUT
      - name: Validate and archive package URLs
        if: steps.check-deploy.outputs.updated == 'true'
        run: |
          binary_type=${{ matrix.binary-type.name }}
          version=${{ steps.check-deploy.outputs.version }}
          blob_dir=${{ matrix.binary-type.blob-dir }}
          echo "" > valid_urls_${binary_type}.txt
          echo "" > archive_log_${binary_type}.txt
          if [[ "$binary_type" == "WindowsPlayer" || "$binary_type" == "WindowsStudio64" ]]; then
            manifest_url="https://setup.rbxcdn.com${blob_dir}${version}-rbxPkgManifest.txt"
            total_packages=$(echo "${{ matrix.binary-type.packages }}" | grep -v '^$' | wc -l)
            package_count=0
            status=$(curl -s -I -o /dev/null -w "%{http_code}" "$manifest_url")
            echo "Checking manifest ($((++package_count))/$((total_packages + 1))): $manifest_url (status: $status)" | tee -a archive_log_${binary_type}.txt
            if [ "$status" == "200" ]; then
              echo "Manifest found: $manifest_url" | tee -a archive_log_${binary_type}.txt
              echo "$manifest_url" >> valid_urls_${binary_type}.txt
            else
              echo "Manifest not found: $manifest_url (status: $status)" | tee -a archive_log_${binary_type}.txt
            fi
            # 验证包文件
            echo "${{ matrix.binary-type.packages }}" | while read -r pkg; do
              [ -z "$pkg" ] && continue
              pkg_url="https://setup.rbxcdn.com${blob_dir}${version}-${pkg}"
              pkg_status=$(curl -s -I -o /dev/null -w "%{http_code}" "$pkg_url")
              echo "Checking package ($((++package_count))/$((total_packages + 1))): $pkg_url (status: $pkg_status)" | tee -a archive_log_${binary_type}.txt
              if [ "$pkg_status" == "200" ]; then
                echo "Valid package: $pkg_url" | tee -a archive_log_${binary_type}.txt
                echo "$pkg_url" >> valid_urls_${binary_type}.txt
              else
                echo "Package not found: $pkg_url (status: $pkg_status)" | tee -a archive_log_${binary_type}.txt
              fi
            done
          else
            # MacPlayer 或 MacStudio
            pkg_url="https://setup.rbxcdn.com${blob_dir}${version}-${{ matrix.binary-type.packages }}"
            status=$(curl -s -I -o /dev/null -w "%{http_code}" "$pkg_url")
            echo "Checking package (1/1): $pkg_url (status: $status)" | tee -a archive_log_${binary_type}.txt
            if [ "$status" == "200" ]; then
              echo "Valid package: $pkg_url" | tee -a archive_log_${binary_type}.txt
              echo "$pkg_url" >> valid_urls_${binary_type}.txt
            else
              echo "Package not found: $pkg_url (status: $status)" | tee -a archive_log_${binary_type}.txt
            fi
          fi
          # 过滤空行并存档有效 URL，每次处理一个，等待 5 分钟
          if [ -s valid_urls_${binary_type}.txt ]; then
            grep -v '^$' valid_urls_${binary_type}.txt > valid_urls_${binary_type}_filtered.txt
            mv valid_urls_${binary_type}_filtered.txt valid_urls_${binary_type}.txt
            total_urls=$(wc -l < valid_urls_${binary_type}.txt)
            url_count=0
            user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
            while read -r url; do
              [ -z "$url" ] && { echo "Skipping empty URL" | tee -a archive_log_${binary_type}.txt; continue; }
              url_count=$((url_count + 1))
              echo "Archiving URL $url_count/$total_urls: $url" | tee -a archive_log_${binary_type}.txt
              python -c "import waybackpy; wb = waybackpy.Url('$url', '$user_agent'); archive = wb.save(); print(f'Archived URL: {archive}')" >> archive_log_${binary_type}.txt 2>&1
              if [ $? -eq 0 ]; then
                echo "Successfully archived URL $url_count/$total_urls: $url" | tee -a archive_log_${binary_type}.txt
              else
                echo "Failed to archive URL $url_count/$total_urls: $url, retrying..." | tee -a archive_log_${binary_type}.txt
                sleep 60
                python -c "import waybackpy; wb = waybackpy.Url('$url', '$user_agent'); archive = wb.save(); print(f'Archived URL: {archive}')" >> archive_log_${binary_type}.txt 2>&1
                if [ $? -eq 0 ]; then
                  echo "Successfully archived URL $url_count/$total_urls on retry: $url" | tee -a archive_log_${binary_type}.txt
                else
                  echo "Failed to archive URL $url_count/$total_urls after retry: $url" | tee -a archive_log_${binary_type}.txt
                fi
              fi
              if [ $url_count -lt $total_urls ]; then
                echo "Waiting 300 seconds (5 minutes) before next URL" | tee -a archive_log_${binary_type}.txt
                sleep 300
              fi
            done < valid_urls_${binary_type}.txt
          else
            echo "No valid URLs to archive for $binary_type" | tee -a archive_log_${binary_type}.txt
          fi
      - name: Download valid packages
        if: steps.check-deploy.outputs.updated == 'true'
        run: |
          binary_type=${{ matrix.binary-type.name }}
          mkdir -p downloads/${binary_type}
          if [ -s valid_urls_${binary_type}.txt ]; then
            total_urls=$(wc -l < valid_urls_${binary_type}.txt)
            url_count=0
            while read -r url; do
              [ -z "$url" ] && { echo "Skipping empty URL for download" | tee -a archive_log_${binary_type}.txt; continue; }
              url_count=$((url_count + 1))
              filename=$(basename "$url")
              echo "Downloading package ($url_count/$total_urls): $url" | tee -a archive_log_${binary_type}.txt
              curl -s -L -o "downloads/${binary_type}/${filename}" "$url" --fail
              if [ $? -eq 0 ]; then
                echo "Successfully downloaded package ($url_count/$total_urls): $url to downloads/${binary_type}/${filename}" | tee -a archive_log_${binary_type}.txt
              else
                echo "Failed to download package ($url_count/$total_urls): $url" | tee -a archive_log_${binary_type}.txt
              fi
            done < valid_urls_${binary_type}.txt
          else
            echo "No valid URLs to download for $binary_type" | tee -a archive_log_${binary_type}.txt
          fi
      - name: Upload logs and valid URLs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-and-urls-${{ matrix.binary-type.name }}
          path: |
            deploy_log_${{ matrix.binary-type.name }}.txt
            valid_urls_${{ matrix.binary-type.name }}.txt
            archive_log_${{ matrix.binary-type.name }}.txt
      - name: Upload downloaded packages
        if: steps.check-deploy.outputs.updated == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ matrix.binary-type.name }}
          path: downloads/${{ matrix.binary-type.name }}/*
